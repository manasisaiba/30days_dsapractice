class Solution {
public:
    vector<int> subset_sum(vector<int>& nums,int sum){
        int n=nums.size();
        int dp[n+1][sum+1];
        vector<int>result;
        for(int i=0;i<n+1;i++){
            dp[i][0]= true;
        }
        for(int i=1;i<sum+1;i++){
            dp[0][i]=false;
        }
        for(int i=1;i<n+1;i++){
            for(int j=1;j<sum+1;j++){
                if(nums[i-1]<=j){
                    dp[i][j]= dp[i-1][j-nums[i-1]] || dp[i-1][j];
                }
                else{
                    dp[i][j]=dp[i-1][j];
                }
            }
        }
        for(int i=0;i<=(sum/2);i++){
            if(dp[n][i]==true){
                result.push_back(i);
            }
        }
        return result;
    }
    int lastStoneWeightII(vector<int>& stones) {
        int n=stones.size();
        int sum=0;
        for(int i=0;i<n;i++){
            sum+=stones[i];
        }
        vector<int>vec;
        vec=subset_sum(stones,sum);
        int ans=INT_MAX;
        for(int i=0;i<vec.size();i++){
            ans=min(ans,sum-2*vec[i]);
        }
        return ans;
    }
};
